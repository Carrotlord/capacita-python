===== Starting tests...
===== Testing capacita_programs/argument_type.cap
3three
MismatchedType exception
3 is not of type String
Type tree is: {'Function': ('Function',)
, 'Ratio': ('Ratio', 'Rational')
, 'String': ('String',)
, 'Sequence': ('Sequence', 'Iterable')
  ('String',)
  ('List',)
  ('Table',)
, 'Int': ('Int', 'Integer')
, 'Double': ('Double',)
, 'Void': ('Null', 'Void')
, 'Object': ('Object',)
  ('Number',)
    ('Int', 'Integer')
    ('Double',)
    ('Ratio', 'Rational')
  ('Sequence', 'Iterable')
    ('String',)
    ('List',)
    ('Table',)
  ('Tag',)
  ('Boolean',)
  ('Null', 'Void')
  ('Function',)
  ('Instance',)
  ('Trigger',)
, 'List': ('List',)
, 'Number': ('Number',)
  ('Int', 'Integer')
  ('Double',)
  ('Ratio', 'Rational')
, 'Trigger': ('Trigger',)
, 'Instance': ('Instance',)
, 'Tag': ('Tag',)
, 'Rational': ('Ratio', 'Rational')
, 'Table': ('Table',)
, 'Integer': ('Int', 'Integer')
, 'Null': ('Null', 'Void')
, 'Iterable': ('Sequence', 'Iterable')
  ('String',)
  ('List',)
  ('Table',)
, 'Boolean': ('Boolean',)
}
===== Exception: <type 'exceptions.SystemExit'>
===== Testing capacita_programs/big_int.cap
12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000
354224848179261915075
12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000
354224848179261915075
354224848179261915076
===== Testing capacita_programs/boolean.cap
false
true
true
false
true
true
true
false
===== Testing capacita_programs/builtin.cap
166
166.666666667
293
293.571428571
[1, 2, 3]
[1, 2, 3, 4, 5, 6]
[10, 20, 30, 40, 50, 60]
[[1, 2], [3, 4], [5, 6], [7, 8]]
[]
[]
[]
===== Testing capacita_programs/builtin_methods.cap
[3, 3]
3
[1, 2, 4]
2
[1, 5, 4]
[4, 5, 1]
1
[5, 1]
[4, 5]
===== Testing capacita_programs/comments.cap
[5, 6, 7, "https://example.com", "/* something */", 0.714285714286]
===== Testing capacita_programs/compound_assignment.cap
138
7:276
1.2
hellohellohello
Compound assignment operators include +=, *=, /=, ...
===== Testing capacita_programs/exceptions.cap
Caught 4
Caught double 1.15
Caught table {1, 2 | 3, 4}
Nothing thrown
Nothing caught
UncaughtException exception
Thrown value ['5']
===== Exception: <type 'exceptions.SystemExit'>
===== Testing capacita_programs/exceptions2.cap
divide by zero exception
some exception
exception during function h: divide by zero exception
another divide by zero exception
===== Testing capacita_programs/exponent_notation.cap
200100000.0
0.023
0.0797130269571
4.8e+81
325046.296296
8069656.1857
333333.333333
8333333.33333
===== Testing capacita_programs/first_class.cap
1620.0625
2:5
===== Testing capacita_programs/first_class2.cap
10
25
55
55
6
8:1
15:2
10:1
225
10000
25:2
15:1
625
160000
===== Testing capacita_programs/for.cap
0 1 2 3 4 5 6 
Alice, Bob, Carol, David, Eve
10, 40, 70
20, 50, 80
30, 60, 90
100
200, 300
400, 500, 600
700, 800
===== Testing capacita_programs/for_each.cap
1 2 3 
Alex & Alice
Alex & Beth
Alex & Carol
Bob & Alice
Bob & Beth
Bob & Carol
Chris & Alice
Chris & Beth
Chris & Carol
1.2 3.4 5.6 
7.8 9.1 2.3 
4.5 6.7 8.9 
===== Testing capacita_programs/frames.cap
[{'a': 5, 'intDiv': <function intDiv('a', 'b')>, 'b': 7, 'false': False, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>, 'c': 9, 'makeList': <function makeList(on)>, 'null': None, 'true': True, '$hooks': {'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>}}, {'y': 7, 'x': 5, 'z': 2, 'w': 3}]
12
[{'a': 5, 'intDiv': <function intDiv('a', 'b')>, 'b': 7, 'false': False, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>, 'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'c': 9, 'makeList': <function makeList(on)>, 'null': None, 'true': True, '$hooks': {'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>}}, {'n': 4}]
[{'a': 5, 'intDiv': <function intDiv('a', 'b')>, 'b': 7, 'false': False, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>, 'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'c': 9, 'makeList': <function makeList(on)>, 'null': None, 'true': True, '$hooks': {'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>}}, {'n': 4}, {'n': 3}]
[{'a': 5, 'intDiv': <function intDiv('a', 'b')>, 'b': 7, 'false': False, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>, 'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'c': 9, 'makeList': <function makeList(on)>, 'null': None, 'true': True, '$hooks': {'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>}}, {'n': 4}, {'n': 3}, {'n': 2}]
[{'a': 5, 'intDiv': <function intDiv('a', 'b')>, 'b': 7, 'false': False, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>, 'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'c': 9, 'makeList': <function makeList(on)>, 'null': None, 'true': True, '$hooks': {'factorial': <function factorial('n') -> ('print this', ':cond n <= 1', ':jf 4', 'return 1', 'return n * factorial(n - 1)', 'return null')>, 'f': <function f('x', 'y') -> ('z = 2', 'w = 3', 'print this', 'return x + y', 'return null')>}}, {'n': 4}, {'n': 3}, {'n': 2}, {'n': 1}]
24
===== Testing capacita_programs/functional.cap
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[169, 196, 225, 256, 289, 324, 361]
[false, true, false, true, false, true, false]
-13
-81
true
false
true
false
false
true
-31
-1
[<function g('x')>, <function fPrime('x0')>, [70, 71, 72, 73, 74, 75]]
[<function g('x')>, <function g('x')>, <function g('x')>, <function fPrime('x0')>, 160]
5.0
===== Testing capacita_programs/imports.cap
1.41421356237
3.14159265359
2.71828182846
1.61803398875
0.69314718056
1.0
3.0
1.99999999998
1.41421356237
3.14159265359
2.71828182846
1.61803398875
0.69314718056
1.0
3.0
1.99999999998
===== Testing capacita_programs/imports2.cap
333.8335
333.333333333
0.33327779012
-0.111073816811
0.333333333333
-0.111111111111
6765
2432902008176640000
35
1
4
===== Testing capacita_programs/indexing.cap
1
2
3
[1, 1:2]
2:3
3:4
10
60
50
300
600
9
3
4.4
[[2, 3], [0]]
[2, 3]
===== Testing capacita_programs/inheritance.cap
Object{#real, 1 | #i, 2 | #imag, 2 | #r, 1 | #$type, "ComplexNumber"}
Object{#real, 3 | #i, 4 | #imag, 4 | #r, 3 | #$type, "ComplexNumber"}
Object{#$type, "PepperoniPizza"}
Object{#$type, "ChocolatePizza"}
===== Testing capacita_programs/inheritance2.cap
Object{#real, 1 | #i, 2 | #imag, 2 | #r, 1 | #$type, "ComplexNumber"}
Object{#real, 3 | #i, 4 | #imag, 4 | #r, 3 | #$type, "ComplexNumber"}
Object{#$type, "PepperoniPizza"}
Object{#$type, "ChocolatePizza"}
MismatchedType exception
{'real': 1, 'i': 2, '$type': '"ComplexNumber"', 'imag': 2, 'this': {...}, 'r': 1} is not of type Pizza
Type tree is: {'Ratio': ('Ratio', 'Rational')
, 'Instance': ('Instance',)
, 'Trigger': ('Trigger',)
, 'Rational': ('Ratio', 'Rational')
, 'ChocolateItem': ('ChocolateItem',)
  ('ChocolatePizza',)
, 'Pizza': ('Pizza',)
  ('PepperoniPizza',)
  ('ChocolatePizza',)
, 'Function': ('Function',)
, 'String': ('String',)
, 'Food': ('Food',)
  ('Pizza',)
    ('PepperoniPizza',)
    ('ChocolatePizza',)
  ('Dessert',)
    ('ChocolateItem',)
      ('ChocolatePizza',)
, 'Dessert': ('Dessert',)
  ('ChocolateItem',)
    ('ChocolatePizza',)
, 'Void': ('Null', 'Void')
, 'Object': ('Object',)
  ('Number',)
    ('Int', 'Integer')
    ('Double',)
    ('Ratio', 'Rational')
    ('ComplexNumber',)
  ('Sequence', 'Iterable')
    ('String',)
    ('List',)
    ('Table',)
  ('Tag',)
  ('Boolean',)
  ('Null', 'Void')
  ('Function',)
  ('Instance',)
  ('Trigger',)
  ('Food',)
    ('Pizza',)
      ('PepperoniPizza',)
      ('ChocolatePizza',)
    ('Dessert',)
      ('ChocolateItem',)
        ('ChocolatePizza',)
, 'Boolean': ('Boolean',)
, 'Integer': ('Int', 'Integer')
, 'Double': ('Double',)
, 'List': ('List',)
, 'ChocolatePizza': ('ChocolatePizza',)
, 'PepperoniPizza': ('PepperoniPizza',)
, 'Sequence': ('Sequence', 'Iterable')
  ('String',)
  ('List',)
  ('Table',)
, 'Int': ('Int', 'Integer')
, 'Number': ('Number',)
  ('Int', 'Integer')
  ('Double',)
  ('Ratio', 'Rational')
  ('ComplexNumber',)
, 'ComplexNumber': ('ComplexNumber',)
, 'Tag': ('Tag',)
, 'Table': ('Table',)
, 'Null': ('Null', 'Void')
, 'Iterable': ('Sequence', 'Iterable')
  ('String',)
  ('List',)
  ('Table',)
}
===== Exception: <type 'exceptions.SystemExit'>
===== Testing capacita_programs/lists.cap
[1, 2, 3, 4, 5, 6]
[[1, 2], [3, 4], 5, [6, 7]]
[22, 33]
[2000, 4000]
[3, 4]
[[10, 20], [30, 40]]
[25, 64]
===== Testing capacita_programs/methods.cap
1+2i
3+4i
5+6i
7+8i
9
10
7+8i
===== Testing capacita_programs/methods2.cap
Bob is 25 years old, and is 170 cm tall.
Bob is 27 years old, and is 172 cm tall.
Alice is 24 years old, and is 165 cm tall.
Allison is 25 years old, and is 167 cm tall.
Bob is 27 years old, and is 172 cm tall.
Object{#advance, <function advance() -> ('age = age + 1', 'return null')> | #name, "Allison" | #$type, "Person" | #age, 25 | #height, 167 | #changeName, <function changeName('n') -> ('name = n', 'return null')> | #toString, <function toString() -> ('return name + " is " + age + " years old, and is " + height + " cm tall."', 'return null')> | #grow, <function grow() -> ('height = height + 2', 'return null')> | #$hooks, Object{#advance, <function advance() -> ('age = age + 1', 'return null')> | #changeName, <function changeName('n') -> ('name = n', 'return null')> | #toString, <function toString() -> ('return name + " is " + age + " years old, and is " + height + " cm tall."', 'return null')> | #grow, <function grow() -> ('height = height + 2', 'return null')>}}
Object{#advance, <function advance() -> ('age = age + 1', 'return null')> | #name, "Bob" | #$type, "Person" | #age, 27 | #height, 172 | #changeName, <function changeName('n') -> ('name = n', 'return null')> | #toString, <function toString() -> ('return name + " is " + age + " years old, and is " + height + " cm tall."', 'return null')> | #grow, <function grow() -> ('height = height + 2', 'return null')> | #$hooks, Object{#advance, <function advance() -> ('age = age + 1', 'return null')> | #changeName, <function changeName('n') -> ('name = n', 'return null')> | #toString, <function toString() -> ('return name + " is " + age + " years old, and is " + height + " cm tall."', 'return null')> | #grow, <function grow() -> ('height = height + 2', 'return null')>}}
===== Testing capacita_programs/methods3.cap
Alice drives to work.
Alice does work.
Alice drives to home.
Bob drives to work.
Bob does work.
Bob drives to home.
Carol rides a bicycle to school.
Carol studies at school.
Carol calls Alice.
Carol rides a bicycle to home.
Carol studies at home.
===== Testing capacita_programs/objects.cap
Object{#car, 1 | #cdr, 2}
1
2
10
Object{#car, 20 | #cdr, Object{#car, 30 | #cdr, null}}
10
20
30
3
[10, 20, 30]
[10, 20, 30, 40, 50]
[10, 20, 30, 40, 50, 60]
===== Testing capacita_programs/one_line_function.cap
106.09
5.0
105
5000
{#x, 45.0 | #y, 80.0}
===== Testing capacita_programs/quotes.cap
'
"
'
"
===== Testing capacita_programs/recursion.cap
24
3628800
126
3
21
14
===== Testing capacita_programs/recursion2.cap
24
3628800
126
3
21
14
true
12
9
===== Testing capacita_programs/restricted_list.cap
0
alpha
beta
gamma
delta
4
[1, 2, 3, 4, 3:2, 2.5]
[1, 2, 3, 4, 3:2, 2.5, "alpha", "beta", "gamma", "delta"]
[1, 2, 3, 4, 5, 6.0]
[1, 2, 3, 4, 5] of Int
[1, 2, 3, 4, 5] of Int
[4, 5, 1, 2, 3]
===== Testing capacita_programs/return_type.cap
Meow
Woof
IncorrectReturnType exception
{'this': {...}, '$type': '"Frog"', 'name': '"Alex"'} is not of type Mammal
===== Exception: <type 'exceptions.SystemExit'>
===== Testing capacita_programs/self_reference.cap
Object{#car, 1 | #cdr, ... | #$type, "Cons"}
[1, 2, 3, ...]
{1, 2 | 3, ... | ..., 100}
{1, 2 | 3, ... | ..., ...}
===== Testing capacita_programs/show.cap
5===== Testing capacita_programs/sort.cap
[-2400, -500, 1:3, 2:5, 8, 9, 10, 16, 65535]
[-2400, -500, 1:3, 2:5, 8, 9, 10, 16, 65535]
===== Testing capacita_programs/special_arguments.cap
[0, 1, 5, 10, 3, 15:28]
[1, 2, 3]
[1, 2, 3, 4, 5]
[1, 2, 5, 18.2, 1:7]
[1, 2, 3, 18.2, 1:7]
[1, 2, 3, 4, 1:7]
60
52003
[1, 2, 3, 4, 5, []]
[1, 2, 4, 5, 6, [3]]
[1, 2, 5, 6, 7, [3, 4]]
[1, 2, []]
[1, 2, []]
[1, 2, [3, 4]]
[3, 4, [1, 2]]
===== Testing capacita_programs/strings.cap
abcdefghijklmnopqrstuvwxyz0123456789
	A
B"C"D\EA
ABCDEFGHIJKLMNOPQRSTUVWXYZ)!@#$%^&*(
[]{}
===== Testing capacita_programs/sub.cap
20.6
33
1
0
3
32:1
200 201 202 203 204 205 206 207 208 
-5.68 -4.68 -3.68 -2.68 -1.68 -0.68 0.32 1.32 2.32 
14
ex why zee
===== Testing capacita_programs/sub2.cap
1 along with 2
ice cream along with eggs and milk
32
32.0
13:7
65.8571428571
something
77.3086790007
hey
 hello 
hi
hey hello hi
4.84
===== Testing capacita_programs/sub3.cap
3628800
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 
===== Testing capacita_programs/super.cap
*bat noises*
meow
Hello, my name is Bob, and I am male.
Hello, my name is Alice, and I am female.
Hello, my name is Chris, and I am male.
Hello, my name is Daisy, and I am female.
===== Testing capacita_programs/tables.cap
{1, 2 | 3, 4 | 5, 6 | 7, 8 | "pie", "blueberry" | #x, #y}
2
blueberry
#y
6
[1, 3, 5, 7, "pie", #x]
[10, 20, 30]
[4, 5, 6]
[4, 5, 6]
[10, 20, 30]
true
false
true
false
{1, 2 | 3, 4 | 5, 6 | 7, 8 | "pie", "blueberry" | #x, #y | [1, 2, 3], [4, 5, 6] | [1, 2], [10, 20, 30]}
===== Testing capacita_programs/tables2.cap
{"Bob", 1 | "Alice", 2 | "Eve", 3}
{"Bob", 1 | "Alice", 2 | "Eve", 3}
something
{"Bob", 100 | "Alice", 200 | "Eve", 300}
===== Testing capacita_programs/tables3.cap
{[], 5}
{[], 6}
===== Testing capacita_programs/tags.cap
#something
false
true
false
true
true
===== Testing capacita_programs/test.cap
68
818:7
Hello, world!!!
x is four.
y is positive, possibly 0
Four
u is true
This will be printed.
72
-16.755
-14.755
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
1 2 3 5 8 13 21 34 55 89 144 
===== Testing capacita_programs/this.cap
[8, 21]
Object{#a, 10 | #moveLeft, <function moveLeft() -> ('this.x = this.x - 1', 'return null')> | #b, 20 | #moveDown, <function moveDown() -> ('this.y = this.y - 1', 'return null')> | #$type, "Point" | #$hooks, Object{#moveLeft, <function moveLeft() -> ('this.x = this.x - 1', 'return null')> | #moveRight, <function moveRight() -> ('this.x = this.x + 1', 'return null')> | #display, <function display() -> ('show "["', 'show this.x', 'show ", "', 'show this.y', 'print "]"', 'return null')> | #moveUp, <function moveUp() -> ('this.y = this.y + 1', 'return null')> | #moveDown, <function moveDown() -> ('this.y = this.y - 1', 'return null')>} | #moveRight, <function moveRight() -> ('this.x = this.x + 1', 'return null')> | #y, 21 | #x, 8 | #display, <function display() -> ('show "["', 'show this.x', 'show ", "', 'show this.y', 'print "]"', 'return null')> | #moveUp, <function moveUp() -> ('this.y = this.y + 1', 'return null')>}
[10, 20]
Object{#a, 10 | #moveLeft, <function moveLeft() -> ('this.x = this.x - 1', 'return null')> | #b, 20 | #moveDown, <function moveDown() -> ('this.y = this.y - 1', 'return null')> | #$type, "Point" | #$hooks, Object{#moveLeft, <function moveLeft() -> ('this.x = this.x - 1', 'return null')> | #moveRight, <function moveRight() -> ('this.x = this.x + 1', 'return null')> | #display, <function display() -> ('show "["', 'show this.x', 'show ", "', 'show this.y', 'print "]"', 'return null')> | #moveUp, <function moveUp() -> ('this.y = this.y + 1', 'return null')> | #moveDown, <function moveDown() -> ('this.y = this.y - 1', 'return null')>} | #moveRight, <function moveRight() -> ('this.x = this.x + 1', 'return null')> | #y, 20 | #x, 10 | #display, <function display() -> ('show "["', 'show this.x', 'show ", "', 'show this.y', 'print "]"', 'return null')> | #moveUp, <function moveUp() -> ('this.y = this.y + 1', 'return null')>}
===== Testing capacita_programs/types.cap
[5, 15.6, 17.6]
[500, 15.6, 300]
[]
[4]
string
44:7
1:2
100
200, 300
400, 500, 600
700, 800
===== Testing capacita_programs/while.cap
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
9 18 27 36 45 54 63 72 81 90 99 108 117 126 135 144 153 
Shown once.
0 1 2 3 4 |0 1 2 3 4 |0 1 2 3 4 |0 1 2 3 4 |0 1 2 3 4 |0 1 2 3 4 |
===== Testing capacita_programs/while2.cap
0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 
0 1 2 3 
0 1 2 0 1 2 0 1 2 0 1 2 
0 1 2 
===== Testing capacita_programs/while3.cap
0 1 2 3 4 0 1 2 3 4 
101 0 1 2 3 4 102 0 1 2 3 4 103 0 1 2 3 4 104 105 106 107 
===== Testing capacita_programs/zero_args.cap
6
17:2
-5:2
===== Done.
